@model IEnumerable<Pusthakalaya.Models.ApplicationUser>
@using Microsoft.AspNetCore.Identity
@inject UserManager<Pusthakalaya.Models.ApplicationUser> UserManager

@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* User List */
    .user-list {
        max-height: 500px;
        overflow-y: auto;
        border: 1px solid rgba(43, 108, 176, 0.2); /* Subtle blue border to tie into nav */
        border-radius: 8px;
        padding: 10px;
        background: #fefce8; /* Light amber to match other sections */
    }

    .user-item {
        display: flex;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #e5e7eb;
    }

        .user-item:last-child {
            border-bottom: none;
        }

        .user-item img {
            width: 40px;
            height: 40px;
            object-fit: cover;
            border-radius: 50%;
            margin-right: 10px;
        }

        .user-item .no-image {
            width: 40px;
            height: 40px;
            background: #fef9c3; /* Lighter amber for placeholder */
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
            font-size: 12px;
            color: #92400e; /* Dark amber for text */
        }

    .user-details {
        flex-grow: 1;
    }

        .user-details h4 {
            font-size: 1rem;
            font-weight: 600;
            color: #92400e; /* Dark amber-brown to match headings */
        }

        .user-details p {
            font-size: 0.875rem;
            color: #4b5563; /* Dark gray to match other secondary text */
        }

    .user-actions {
        display: flex;
        gap: 10px;
    }

        .user-actions a {
            font-size: 0.875rem;
            font-weight: 600;
            padding: 0.5rem 1rem;
            border-radius: 50px;
            transition: all 0.3s ease;
            text-align: center;
        }

        .user-actions .view-profile {
            background: linear-gradient(to right, #2b6cb0, #4c51bf); /* Blue gradient to match nav */
            color: #ffffff;
        }

            .user-actions .view-profile:hover {
                background: #1e40af; /* Darker blue on hover */
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(76, 81, 191, 0.3);
            }

        .user-actions .delete-notice {
            background: #b91c1c; /* Dark red for delete action */
            color: #ffffff;
        }

            .user-actions .delete-notice:hover {
                background: #7f1d1d; /* Darker red on hover */
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(185, 28, 28, 0.3);
            }

    /* Filter Buttons */
    .filter-buttons {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        justify-content: center;
    }

    .filter-button {
        padding: 8px 16px;
        background: linear-gradient(to right, #2b6cb0, #4c51bf); /* Blue gradient to match nav */
        color: #ffffff;
        border-radius: 50px; /* Rounded to match other buttons */
        font-weight: 500;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .filter-button:hover {
            background: #1e40af; /* Darker blue on hover */
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(76, 81, 191, 0.3);
        }

        .filter-button.active {
            background: #1e40af; /* Darker blue when active */
            transform: scale(1.05);
        }

    /* Container */
    .dashboard-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1.5rem 1rem;
        background: linear-gradient(180deg, #fefce8, #f5e6b8); /* Light amber gradient */
        border-radius: 12px;
    }

        /* Heading */
        .dashboard-container h2 {
            font-size: 1.875rem; /* 2xl equivalent */
            font-weight: 700;
            color: #92400e; /* Dark amber-brown to match hero heading */
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .dashboard-container h3 {
            font-size: 1.25rem; /* xl equivalent */
            font-weight: 600;
            color: #92400e; /* Dark amber-brown */
            margin-bottom: 1rem;
            text-align: center;
        }

    /* Success Message */
    .success-message {
        background: #d1fae5; /* Light green background for success */
        color: #047857; /* Dark green text */
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        text-align: center;
        font-size: 0.875rem; /* Consistent font size */
    }

    /* Error Message */
    .error-message {
        background: #fee2e2; /* Light red background for errors */
        color: #b91c1c; /* Dark red text */
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        text-align: center;
        font-size: 0.875rem; /* Consistent font size */
    }

    /* Dark Mode Adjustments */
    .dark .dashboard-container {
        background: linear-gradient(180deg, #4b5563, #2d3748); /* Darker shades for contrast */
    }

        .dark .dashboard-container h2,
        .dark .dashboard-container h3,
        .dark .user-details h4,
        .dark .user-item .no-image {
            color: #fefce8; /* Light amber for text */
        }

    .dark .user-details p {
        color: #a0aec0; /* Lighter gray for secondary text */
    }

    .dark .user-list {
        background: #2d3748; /* Dark gray to match home page dark mode */
        border-color: rgba(96, 165, 250, 0.3); /* Light blue border */
    }

    .dark .user-item {
        border-bottom-color: #6b7280;
    }

        .dark .user-item .no-image {
            background: #6b7280; /* Darker amber-gray for placeholder */
        }

    .dark .success-message {
        background: #064e3b; /* Darker green background */
        color: #6ee7b7; /* Lighter green text */
    }

    .dark .error-message {
        background: #7f1d1d; /* Darker red background */
        color: #f87171; /* Lighter red text */
    }

    .dark .filter-button {
        background: linear-gradient(to right, #1e40af, #2b6cb0); /* Darker blue gradient */
    }

        .dark .filter-button:hover,
        .dark .filter-button.active {
            background: #4c51bf;
        }

    .dark .user-actions .view-profile {
        background: linear-gradient(to right, #1e40af, #2b6cb0);
    }

        .dark .user-actions .view-profile:hover {
            background: #4c51bf;
        }

    .dark .user-actions .delete-notice {
        background: #7f1d1d;
    }

        .dark .user-actions .delete-notice:hover {
            background: #b91c1c;
        }
</style>

<div class="dashboard-container">
    <h2>Admin Dashboard</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="success-message">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="error-message">
            @TempData["ErrorMessage"]
        </div>
    }

    <!-- Manage Users Section -->
    <h3>Manage Users</h3>

    <!-- Filter Buttons -->
    <div class="filter-buttons">
        <button class="filter-button active" onclick="filterUsers('all')">All Users</button>
        <button class="filter-button" onclick="filterUsers('Admin')">Admins</button>
        <button class="filter-button" onclick="filterUsers('Staff')">Staff</button>
        <button class="filter-button" onclick="filterUsers('Member')">Members</button>
    </div>

    <!-- User List -->
    <div class="user-list">
        @foreach (var user in Model)
        {
            var roles = await UserManager.GetRolesAsync(user);
            var roleClass = roles.Any() ? string.Join(" ", roles) : "NoRole";
            <div class="user-item @roleClass" data-roles="@roleClass">
                @if (!string.IsNullOrEmpty(user.ProfileImageUrl))
                {
                    <img src="@user.ProfileImageUrl" alt="@user.UserName" />
                }
                else
                {
                    <div class="no-image">
                        <span>No Image</span>
                    </div>
                }
                <div class="user-details">
                    <h4>@user.UserName</h4>
                    <p>Email: @user.Email</p>
                    <p>Roles: @(roles.Any() ? string.Join(", ", roles) : "None")</p>
                </div>
                <div class="user-actions">
                    <a asp-action="ViewProfile" asp-route-id="@user.Id" class="view-profile">View Profile</a>
                    <a asp-action="SendDeletionNotice" asp-route-id="@user.Id" class="delete-notice">Send Deletion Notice</a>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function filterUsers(role) {
            // Update button styles
            document.querySelectorAll('.filter-button').forEach(button => {
                button.classList.remove('active');
            });
            document.querySelector(`button[onclick="filterUsers('${role}')"]`).classList.add('active');

            // Show/hide users based on role
            const userItems = document.querySelectorAll('.user-item');
            userItems.forEach(item => {
                if (role === 'all') {
                    item.style.display = 'flex';
                } else {
                    const roles = item.getAttribute('data-roles').split(' ');
                    item.style.display = roles.includes(role) ? 'flex' : 'none';
                }
            });
        }

        // Initialize with all users visible
        filterUsers('all');
    </script>
}