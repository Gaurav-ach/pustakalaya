@model IEnumerable<Pusthakalaya.Models.CartWithDiscountViewModel>

@{
    ViewData["Title"] = "My Cart";
}

<style>
    /* Container */
    .cart-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1.5rem 1rem;
        background: linear-gradient(180deg, #fefce8, #f5e6b8); /* Light amber gradient to match home page */
        border-radius: 0.75rem; /* 12px */
    }

        /* Heading */
        .cart-container h2 {
            font-size: 1.875rem; /* 2xl equivalent */
            font-weight: 700;
            color: #92400e; /* Dark amber-brown to match hero heading */
            margin-bottom: 1.5rem;
            text-align: center;
        }

    /* Success Message */
    .success-message {
        background: #d1fae5; /* Light green background for success */
        color: #047857; /* Dark green text */
        padding: 1rem;
        border-radius: 0.5rem; /* 8px */
        margin-bottom: 1rem;
        text-align: center;
        font-size: 0.875rem;
    }

    /* Error Message */
    .error-message {
        background: #fee2e2; /* Light red background for errors */
        color: #b91c1c; /* Dark red text */
        padding: 1rem;
        border-radius: 0.5rem; /* 8px */
        margin-bottom: 1rem;
        text-align: center;
        font-size: 0.875rem;
    }

    /* Empty Cart Message */
    .empty-cart-message {
        font-size: 0.875rem;
        color: #4b5563; /* Dark gray for secondary text */
        text-align: center;
    }

    /* Cart Items Grid */
    .cart-items-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    /* Cart Item Card */
    .cart-item-card {
        background: #fefce8; /* Light amber to match home page */
        border-radius: 0.75rem; /* 12px */
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
        padding: 0.5rem;
        display: flex;
        flex-direction: column;
        position: relative;
        border: 1px solid rgba(43, 108, 176, 0.2); /* Subtle blue border to tie into nav */
    }

        .cart-item-card .sale-badge {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: #b91c1c; /* Red for sale badge */
            color: #ffffff;
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem; /* 4px */
        }

        .cart-item-card img {
            width: 100%;
            height: 9rem; /* 36 equivalent */
            object-fit: cover;
            border-radius: 0.5rem; /* 8px */
            margin-bottom: 0.5rem;
        }

        .cart-item-card .no-image {
            width: 100%;
            height: 9rem; /* 36 equivalent */
            background: #fef9c3; /* Lighter amber for placeholder */
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.5rem; /* 8px */
            margin-bottom: 0.5rem;
            color: #4b5563; /* Dark gray for text */
            font-size: 0.875rem;
        }

        .cart-item-card h3 {
            font-size: 1rem; /* base equivalent */
            font-weight: 600;
            color: #92400e; /* Dark amber-brown to match headings */
            margin-bottom: 0.25rem;
        }

            .cart-item-card h3 a {
                color: #92400e;
                transition: color 0.3s ease;
            }

                .cart-item-card h3 a:hover {
                    color: #2b6cb0; /* Blue to match nav */
                }

        .cart-item-card p {
            font-size: 0.875rem;
            color: #4b5563; /* Dark gray for secondary text */
            margin-bottom: 0.25rem;
        }

        .cart-item-card .price-info .original-price {
            text-decoration: line-through;
            color: #6b7280; /* Slightly darker gray for readability */
        }

        .cart-item-card .price-info .discounted-price {
            color: #047857; /* Dark green for discounted price */
            font-weight: 600;
            margin-left: 0.5rem;
        }

    /* Quantity Selector */
    .quantity-selector {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
    }

        .quantity-selector button {
            background: #d1d5db; /* Light gray for buttons */
            color: #2d3748; /* Dark gray text */
            font-weight: 500;
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            transition: background-color 0.3s ease;
        }

            .quantity-selector button:first-child {
                border-radius: 0.25rem 0 0 0.25rem; /* Rounded left corners */
            }

            .quantity-selector button:last-child {
                border-radius: 0 0.25rem 0.25rem 0; /* Rounded right corners */
            }

            .quantity-selector button:hover {
                background: #b0b7c1; /* Slightly darker gray on hover */
            }

            .quantity-selector button:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

        .quantity-selector input {
            width: 3rem;
            padding: 0.25rem;
            text-align: center;
            border: 1px solid #d1d5db;
            font-size: 0.875rem;
            color: #2d3748;
            background: #ffffff;
        }

    /* Remove Button */
    .remove-btn {
        width: 100%;
        background: #b91c1c; /* Dark red for destructive action */
        color: #ffffff;
        font-weight: 600;
        font-size: 0.75rem;
        padding: 0.25rem;
        border-radius: 0.25rem; /* 4px */
        transition: all 0.3s ease;
    }

        .remove-btn:hover {
            background: #7f1d1d; /* Darker red on hover */
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(185, 28, 28, 0.3);
        }

    /* Checkout Section */
    .checkout-section {
        text-align: center;
        margin-top: 1rem;
    }

    .total-price {
        font-size: 1rem;
        color: #2d3748; /* Dark gray for primary text */
        margin-bottom: 0.5rem;
    }

    .checkout-btn {
        background: linear-gradient(to right, #2b6cb0, #4c51bf); /* Blue gradient to match nav */
        color: #ffffff;
        font-weight: 600;
        font-size: 0.875rem;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        transition: all 0.3s ease;
    }

        .checkout-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(76, 81, 191, 0.4);
            background: #1e40af; /* Darker blue on hover */
        }

    /* Dark Mode Adjustments */
    .dark .cart-container {
        background: linear-gradient(180deg, #4b5563, #2d3748); /* Darker shades for contrast */
    }

        .dark .cart-container h2 {
            color: #fefce8; /* Light amber for text */
        }

    .dark .success-message {
        background: #064e3b; /* Darker green background */
        color: #6ee7b7; /* Lighter green text */
    }

    .dark .error-message {
        background: #7f1d1d; /* Darker red background */
        color: #f87171; /* Lighter red text */
    }

    .dark .empty-cart-message {
        color: #a0aec0; /* Lighter gray for secondary text */
    }

    .dark .cart-item-card {
        background: #2d3748; /* Dark gray to match home page dark mode */
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
        border-color: rgba(96, 165, 250, 0.3); /* Light blue border in dark mode */
    }

        .dark .cart-item-card .no-image {
            background: #6b7280; /* Darker amber-gray for placeholder */
            color: #a0aec0; /* Lighter gray for text */
        }

        .dark .cart-item-card h3 a {
            color: #fefce8; /* Light amber for headings */
        }

            .dark .cart-item-card h3 a:hover {
                color: #60a5fa; /* Lighter blue on hover */
            }

        .dark .cart-item-card p {
            color: #a0aec0; /* Lighter gray for secondary text */
        }

        .dark .cart-item-card .price-info .original-price {
            color: #a0aec0; /* Lighter gray for secondary text */
        }

        .dark .cart-item-card .price-info .discounted-price {
            color: #6ee7b7; /* Lighter green for discounted price */
        }

    .dark .quantity-selector button {
        background: #6b7280;
        color: #e2e8f0;
    }

        .dark .quantity-selector button:hover {
            background: #4b5563;
        }

    .dark .quantity-selector input {
        background: #4b5563; /* Darker background for inputs */
        border-color: #6b7280;
        color: #e2e8f0; /* Light gray text */
    }

    .dark .remove-btn {
        background: #7f1d1d;
    }

        .dark .remove-btn:hover {
            background: #b91c1c;
        }

    .dark .total-price {
        color: #e2e8f0; /* Light gray for primary text */
    }

    .dark .checkout-btn {
        background: linear-gradient(to right, #1e40af, #2b6cb0); /* Darker blue gradient */
    }

        .dark .checkout-btn:hover {
            background: #4c51bf;
        }
</style>

<div class="cart-container">
    <h2>My Cart</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="success-message">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="error-message">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (!Model.Any())
    {
        <p class="empty-cart-message">Your cart is empty.</p>
    }
    else
    {
        <div class="cart-items-grid" id="cart-items">
            @foreach (var item in Model)
            {
                var cartItem = item.CartItem;
                var book = cartItem.Book;
                <div class="cart-item-card" data-cart-item="@book.Id">
                    @if (item.OnSaleFlag && item.IsDiscountActive)
                    {
                        <span class="sale-badge">On Sale</span>
                    }
                    @if (!string.IsNullOrEmpty(book.CoverImageUrl))
                    {
                        <a asp-controller="Books" asp-action="Details" asp-route-id="@book.Id">
                            <img src="@book.CoverImageUrl" alt="@book.Title" />
                        </a>
                    }
                    else
                    {
                        <div class="no-image">
                            <span>No Image</span>
                        </div>
                    }
                    <h3>
                        <a asp-controller="Books" asp-action="Details" asp-route-id="@book.Id">@book.Title</a>
                    </h3>
                    <p>by @book.Author</p>
                    <p class="price-info">
                        @if (item.IsDiscountActive)
                        {
                            <span class="original-price">$@book.Price</span>
                            <span class="discounted-price">$@item.DiscountedPrice.ToString("F2")</span>
                        }
                        else
                        {
                            <span>Price: $@book.Price</span>
                        }
                    </p>
                    <p data-stock="@book.Id">In Stock: @book.Quantity</p>
                    <p data-total-price="@book.Id">Total: $@((item.IsDiscountActive ? item.DiscountedPrice : book.Price) * cartItem.Quantity)</p>
                    <div class="quantity-selector">
                        <button onclick="updateQuantity(@book.Id, @cartItem.Quantity - 1, @(item.IsDiscountActive ? item.DiscountedPrice : book.Price))" @(cartItem.Quantity <= 1 ? "disabled" : "") class="@(cartItem.Quantity <= 1 ? "opacity-50 cursor-not-allowed" : "")">-</button>
                        <input type="number" id="quantity-@book.Id" value="@cartItem.Quantity" min="1" onchange="updateQuantity(@book.Id, this.value, @(item.IsDiscountActive ? item.DiscountedPrice : book.Price))" />
                        <button onclick="updateQuantity(@book.Id, @cartItem.Quantity + 1, @(item.IsDiscountActive ? item.DiscountedPrice : book.Price))" id="increment-@book.Id">+</button>
                    </div>
                    <form asp-action="RemoveFromCart" method="post">
                        <input type="hidden" name="bookId" value="@book.Id" />
                        <button type="submit" class="remove-btn">Remove</button>
                    </form>
                </div>
            }
        </div>
        <div class="checkout-section">
            <p class="total-price" id="total-cart-price">Total Price: $@Model.Sum(c => (c.IsDiscountActive ? c.DiscountedPrice : c.CartItem.Book.Price) * c.CartItem.Quantity)</p>
            <a asp-action="Checkout" asp-controller="Cart" class="checkout-btn">Proceed to Checkout</a>
        </div>
    }
</div>

@section Scripts {
    <script>
        let cartItems = @Html.Raw(Json.Serialize(Model.Select(c => new { bookId = c.CartItem.Book.Id, quantity = c.CartItem.Quantity, price = c.IsDiscountActive ? c.DiscountedPrice : c.CartItem.Book.Price, stock = c.CartItem.Book.Quantity })));

        async function fetchStock(bookId) {
            try {
                const response = await fetch(`@Url.Action("GetBookStock", "Books")?bookId=${bookId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch stock');
                }
                const data = await response.json();
                return data.stock;
            } catch (error) {
                console.error('Error fetching stock:', error);
                let item = cartItems.find(i => i.bookId === bookId);
                return item ? item.stock : 0;
            }
        }

        async function fetchCartItem(bookId) {
            try {
                const response = await fetch(`@Url.Action("GetCartItem", "Cart")?bookId=${bookId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch cart item');
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching cart item:', error);
                return null;
            }
        }

        async function updateQuantity(bookId, newQuantity, price) {
            // Fetch the latest cart item data
            const cartItemData = await fetchCartItem(bookId);
            if (!cartItemData || !cartItemData.exists) {
                alert('Book not in your cart.');
                // Remove the item from the UI
                const itemElement = document.querySelector(`[data-cart-item="${bookId}"]`);
                if (itemElement) {
                    itemElement.remove();
                }
                // Update total cart price
                cartItems = cartItems.filter(item => item.bookId !== bookId);
                let totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;
                return;
            }

            // Fetch the latest stock
            const maxQuantity = await fetchStock(bookId);

            // Update stock display
            document.querySelector(`[data-stock="${bookId}"]`).textContent = `In Stock: ${maxQuantity}`;

            // Update cart items array with new stock
            let item = cartItems.find(i => i.bookId === bookId);
            if (item) {
                item.stock = maxQuantity;
            }

            // Validate quantity
            if (newQuantity < 1) {
                newQuantity = 1;
            }
            if (newQuantity > maxQuantity) {
                newQuantity = maxQuantity;
                alert(`Only ${maxQuantity} copies of this book are available.`);
            }

            // Update UI immediately
            document.getElementById(`quantity-${bookId}`).value = newQuantity;
            document.querySelector(`[data-total-price="${bookId}"]`).textContent = `Total: $${(price * newQuantity).toFixed(2)}`;

            // Update increment button state
            const incrementButton = document.getElementById(`increment-${bookId}`);
            if (newQuantity >= maxQuantity) {
                incrementButton.classList.add('opacity-50', 'cursor-not-allowed');
                incrementButton.setAttribute('disabled', 'disabled');
            } else {
                incrementButton.classList.remove('opacity-50', 'cursor-not-allowed');
                incrementButton.removeAttribute('disabled');
            }

            // Update cart items array
            if (item) {
                item.quantity = newQuantity;
            }

            // Update total cart price
            let totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;

            // Send AJAX request to update server
            fetch('@Url.Action("UpdateCartQuantity", "Cart")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ bookId: bookId, quantity: newQuantity })
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    alert(data.message);
                    // Revert UI if server validation fails
                    let originalItem = cartItems.find(i => i.bookId === bookId);
                    let originalQuantity = originalItem ? originalItem.quantity : 1;
                    document.getElementById(`quantity-${bookId}`).value = originalQuantity;
                    document.querySelector(`[data-total-price="${bookId}"]`).textContent = `Total: $${(price * originalQuantity).toFixed(2)}`;
                    totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                    document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;
                }
            })
            .catch(error => {
                console.error('Error updating quantity:', error);
                alert('Failed to update quantity. Please try again.');
            });
        }
    </script>
}