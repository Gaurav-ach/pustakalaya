@model IEnumerable<Pusthakalaya.Models.BookWithDiscountViewModel>
@using Microsoft.AspNetCore.Identity
@inject UserManager<Pusthakalaya.Models.ApplicationUser> UserManager

@{
    ViewData["Title"] = "Books";
}

<style>
    /* Container */
    .books-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1.5rem 1rem;
        background: linear-gradient(180deg, #fefce8, #f5e6b8); /* Light amber gradient */
        border-radius: 0.75rem; /* 12px */
    }

    /* Admin Create Link */
    .admin-create-section {
        text-align: center;
        margin-bottom: 1rem;
    }

    .create-book-btn {
        background: linear-gradient(to right, #2b6cb0, #4c51bf); /* Blue gradient to match nav */
        color: #ffffff;
        font-weight: 600;
        font-size: 0.875rem;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        transition: all 0.3s ease;
    }

        .create-book-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(76, 81, 191, 0.4);
            background: #1e40af; /* Darker blue on hover */
        }

    /* User Navigation Links */
    .user-nav-section {
        text-align: center;
        margin-bottom: 1rem;
        display: flex;
        justify-content: center;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .view-whitelist-btn {
        background: linear-gradient(to right, #2b6cb0, #4c51bf); /* Blue gradient to match nav */
        color: #ffffff;
        font-weight: 600;
        font-size: 0.875rem;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        transition: all 0.3s ease;
    }

        .view-whitelist-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(76, 81, 191, 0.4);
            background: #1e40af; /* Darker blue on hover */
        }

    /* Category Tabs */
    .category-tabs {
        margin-bottom: 1rem;
    }

        .category-tabs ul {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

    .category-tab {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        border-radius: 0.5rem; /* 8px */
        transition: all 0.3s ease;
    }

        .category-tab.active {
            background: #92400e; /* Dark amber-brown for active tab */
            color: #ffffff;
        }

        .category-tab.inactive {
            background: #fef9c3; /* Lighter amber for inactive tab */
            color: #92400e; /* Dark amber-brown */
        }

            .category-tab.inactive:hover {
                background: #f5e6b8; /* Slightly darker amber on hover */
            }

    /* Filter Form */
    .filter-form-section {
        margin-bottom: 1rem;
    }

    .filter-form {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        justify-content: center;
    }

        .filter-form input,
        .filter-form select {
            width: 100%;
            max-width: 12rem; /* Adjusted for smaller inputs like price */
            padding: 0.5rem 0.75rem;
            border: 1px solid #d1d5db; /* Light gray border */
            border-radius: 0.5rem; /* 8px */
            font-size: 0.875rem;
            color: #2d3748; /* Dark gray text */
            background: #ffffff;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

            .filter-form input:hover,
            .filter-form select:hover {
                border-color: #bfdbfe; /* Light blue on hover to tie into nav */
            }

            .filter-form input:focus,
            .filter-form select:focus {
                outline: none;
                border-color: #4c51bf; /* Blue border on focus to match nav */
                box-shadow: 0 0 0 3px rgba(76, 81, 191, 0.2); /* Blue focus ring */
            }

            /* Adjust specific input widths */
            .filter-form input[name="minPrice"],
            .filter-form input[name="maxPrice"] {
                max-width: 6rem; /* Smaller width for price inputs */
            }

            .filter-form input[name="minRating"] {
                max-width: 8rem; /* Slightly wider for min rating */
            }

        .filter-form .apply-filters-btn {
            background: linear-gradient(to right, #2b6cb0, #4c51bf); /* Blue gradient to match nav */
            color: #ffffff;
            font-weight: 600;
            font-size: 0.875rem;
            padding: 0.5rem 1rem;
            border-radius: 50px;
            transition: all 0.3s ease;
        }

            .filter-form .apply-filters-btn:hover {
                transform: translateY(-3px);
                box-shadow: 0 6px 16px rgba(76, 81, 191, 0.4);
                background: #1e40af; /* Darker blue on hover */
            }

    /* Book Grid */
    .book-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
    }

    /* Book Card */
    .book-card {
        background: #fefce8; /* Light amber to match home page */
        border-radius: 0.75rem; /* 12px */
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
        padding: 0.5rem;
        display: flex;
        flex-direction: column;
        position: relative;
        border: 1px solid rgba(43, 108, 176, 0.2); /* Subtle blue border to tie into nav */
    }

        .book-card .sale-badge {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: #b91c1c; /* Red for sale badge */
            color: #ffffff;
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem; /* 4px */
        }

        .book-card .cover-image-container {
            position: relative;
        }

        .book-card img {
            width: 100%;
            height: 9rem; /* 36 equivalent */
            object-fit: cover;
            border-radius: 0.5rem; /* 8px */
            margin-bottom: 0.5rem;
        }

        .book-card .no-image {
            width: 100%;
            height: 9rem; /* 36 equivalent */
            background: #fef9c3; /* Lighter amber for placeholder */
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.5rem; /* 8px */
            margin-bottom: 0.5rem;
            color: #92400e; /* Dark amber for text */
            font-size: 0.875rem;
        }

        .book-card .wishlist-toggle {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            color: #6b7280; /* Gray for default state */
            transition: color 0.3s ease;
        }

            .book-card .wishlist-toggle:hover {
                color: #b91c1c; /* Red on hover */
            }

            .book-card .wishlist-toggle.active {
                color: #b91c1c; /* Red when active */
            }

            .book-card .wishlist-toggle svg {
                width: 1.5rem; /* 24px */
                height: 1.5rem; /* 24px */
            }

            .book-card .wishlist-toggle .heart-filled {
                display: none;
            }

            .book-card .wishlist-toggle.active .heart-outline {
                display: none;
            }

            .book-card .wishlist-toggle.active .heart-filled {
                display: block;
            }

        .book-card h3 {
            font-size: 1rem; /* base equivalent */
            font-weight: 600;
            color: #92400e; /* Dark amber-brown to match headings */
            margin-bottom: 0.25rem;
        }

            .book-card h3 a {
                color: #92400e;
                transition: color 0.3s ease;
            }

                .book-card h3 a:hover {
                    color: #2b6cb0; /* Blue to match nav */
                }

        .book-card p {
            font-size: 0.875rem;
            color: #4b5563; /* Dark gray for secondary text */
            margin-bottom: 0.25rem;
        }

        .book-card .price-info .original-price {
            text-decoration: line-through;
        }

        .book-card .price-info .discounted-price {
            color: #047857; /* Dark green for discounted price */
            margin-left: 0.5rem;
        }

        .book-card .out-of-stock {
            color: #b91c1c; /* Red for out of stock */
        }

        .book-card .description {
            flex-grow: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            margin-bottom: 0.5rem;
        }

        .book-card .added-date {
            font-size: 0.75rem;
            color: #6b7280; /* Slightly darker gray for readability */
            margin-bottom: 0.5rem;
        }

        .book-card .action-buttons {
            display: flex;
            gap: 0.25rem;
        }

            .book-card .action-buttons a {
                font-weight: 600;
                font-size: 0.75rem;
                padding: 0.25rem 0.5rem;
                border-radius: 50px;
                transition: all 0.3s ease;
                text-align: center;
                flex: 1;
            }

        .book-card .edit-btn {
            background: linear-gradient(to right, #2b6cb0, #4c51bf); /* Blue gradient to match nav */
            color: #ffffff;
        }

            .book-card .edit-btn:hover {
                background: #1e40af; /* Darker blue on hover */
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(76, 81, 191, 0.3);
            }

        .book-card .delete-btn {
            background: #b91c1c; /* Dark red for destructive action */
            color: #ffffff;
        }

            .book-card .delete-btn:hover {
                background: #7f1d1d; /* Darker red on hover */
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(185, 28, 28, 0.3);
            }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 1rem;
    }

        .pagination ul {
            display: flex;
            gap: 0;
        }

        .pagination li a {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            border: 1px solid #d1d5db;
            transition: all 0.3s ease;
        }

            .pagination li a.active {
                background: #92400e; /* Dark amber-brown for active page */
                color: #ffffff;
                border-color: #92400e;
            }

            .pagination li a.inactive {
                background: #fefce8; /* Light amber for inactive pages */
                color: #92400e; /* Dark amber-brown */
                border-color: #d1d5db;
            }

                .pagination li a.inactive:hover {
                    background: #2b6cb0; /* Blue to match nav on hover */
                    color: #ffffff;
                    border-color: #2b6cb0;
                }

    /* Dark Mode Adjustments */
    .dark .books-container {
        background: linear-gradient(180deg, #4b5563, #2d3748); /* Darker shades for contrast */
    }

    .dark .book-card {
        background: #2d3748; /* Dark gray to match home page dark mode */
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
        border-color: rgba(96, 165, 250, 0.3); /* Light blue border in dark mode */
    }

        .dark .book-card h3 a {
            color: #fefce8; /* Light amber for headings */
        }

            .dark .book-card h3 a:hover {
                color: #60a5fa; /* Lighter blue on hover */
            }

        .dark .book-card p {
            color: #a0aec0; /* Lighter gray for secondary text */
        }

        .dark .book-card .no-image {
            background: #6b7280; /* Darker amber-gray for placeholder */
            color: #fefce8;
        }

        .dark .book-card .price-info .discounted-price {
            color: #6ee7b7; /* Lighter green for discounted price */
        }

        .dark .book-card .wishlist-toggle {
            color: #a0aec0; /* Lighter gray for default state */
        }

            .dark .book-card .wishlist-toggle:hover,
            .dark .book-card .wishlist-toggle.active {
                color: #f87171; /* Lighter red for active/hover state */
            }

    .dark .category-tab.active {
        background: #fefce8; /* Light amber for active tab */
        color: #2d3748; /* Dark gray for contrast */
    }

    .dark .category-tab.inactive {
        background: #4b5563; /* Dark gray for inactive tab */
        color: #fefce8; /* Light amber for text */
    }

        .dark .category-tab.inactive:hover {
            background: #60a5fa; /* Lighter blue on hover */
            color: #ffffff;
        }

    .dark .filter-form input,
    .dark .filter-form select {
        background: #4b5563; /* Darker background for inputs */
        border-color: #6b7280;
        color: #e2e8f0; /* Light gray text */
    }

        .dark .filter-form input:hover,
        .dark .filter-form select:hover {
            border-color: #93c5fd; /* Lighter blue on hover */
        }

        .dark .filter-form input:focus,
        .dark .filter-form select:focus {
            border-color: #60a5fa; /* Lighter blue border on focus */
            box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.3);
        }

    .dark .create-book-btn,
    .dark .view-whitelist-btn,
    .dark .filter-form .apply-filters-btn,
    .dark .book-card .edit-btn {
        background: linear-gradient(to right, #1e40af, #2b6cb0); /* Darker blue gradient */
    }

        .dark .create-book-btn:hover,
        .dark .view-whitelist-btn:hover,
        .dark .filter-form .apply-filters-btn:hover,
        .dark .book-card .edit-btn:hover {
            background: #4c51bf;
        }

    .dark .book-card .delete-btn {
        background: #7f1d1d;
    }

        .dark .book-card .delete-btn:hover {
            background: #b91c1c;
        }

    .dark .pagination li a.active {
        background: #fefce8; /* Light amber for active page */
        color: #2d3748; /* Dark gray for contrast */
        border-color: #fefce8;
    }

    .dark .pagination li a.inactive {
        background: #4b5563; /* Dark gray for inactive pages */
        color: #fefce8; /* Light amber for text */
        border-color: #6b7280;
    }

        .dark .pagination li a.inactive:hover {
            background: #60a5fa; /* Lighter blue on hover */
            color: #ffffff;
            border-color: #60a5fa;
        }
</style>

<div class="books-container">
    <!-- Admin Create Link -->
    @if (User.Identity.IsAuthenticated)
    {
        var user = await UserManager.GetUserAsync(User);
        if (user != null && await UserManager.IsInRoleAsync(user, "Admin"))
        {
            <div class="admin-create-section">
                <a asp-action="Create" class="create-book-btn">Create New Book</a>
            </div>
        }
    }

    <!-- User Navigation Links -->
    @if (User.Identity.IsAuthenticated)
    {
        var user = await UserManager.GetUserAsync(User);
        if (user != null && !(await UserManager.IsInRoleAsync(user, "Admin") || await UserManager.IsInRoleAsync(user, "Staff")))
        {
            <div class="user-nav-section">
                <a asp-controller="Cart" asp-action="Whitelist" class="view-whitelist-btn">View Whitelist</a>
            </div>
        }
    }

    <!-- Category Tabs -->
    <div class="category-tabs">
        <ul>
            <li>
                <a asp-action="Index" asp-route-category="all" asp-route-page="1" class="category-tab @(ViewBag.Category == "all" ? "active" : "inactive")">All Books</a>
            </li>
            <li>
                <a asp-action="Index" asp-route-category="bestsellers" asp-route-page="1" class="category-tab @(ViewBag.Category == "bestsellers" ? "active" : "inactive")">Bestsellers</a>
            </li>
            <li>
                <a asp-action="Index" asp-route-category="awardwinners" asp-route-page="1" class="category-tab @(ViewBag.Category == "awardwinners" ? "active" : "inactive")">Award Winners</a>
            </li>
            <li>
                <a asp-action="Index" asp-route-category="newreleases" asp-route-page="1" class="category-tab @(ViewBag.Category == "newreleases" ? "active" : "inactive")">New Releases</a>
            </li>
            <li>
                <a asp-action="Index" asp-route-category="newarrivals" asp-route-page="1" class="category-tab @(ViewBag.Category == "newarrivals" ? "active" : "inactive")">New Arrivals</a>
            </li>
            <li>
                <a asp-action="Index" asp-route-category="comingsoon" asp-route-page="1" class="category-tab @(ViewBag.Category == "comingsoon" ? "active" : "inactive")">Coming Soon</a>
            </li>
            <li>
                <a asp-action="Index" asp-route-category="deals" asp-route-page="1" class="category-tab @(ViewBag.Category == "deals" ? "active" : "inactive")">Deals</a>
            </li>
        </ul>
    </div>

    <!-- Filter Form -->
    <div class="filter-form-section">
        <form asp-action="Index" method="get" id="filterForm" class="filter-form">
            <!-- Search -->
            <div>
                <input type="text" name="search" value="@ViewBag.Search" placeholder="Search by title, ISBN, or description" />
            </div>

            <!-- Sort -->
            <div>
                <select name="sort">
                    <option value="title" selected="@(ViewBag.Sort == "title")">Sort by Title</option>
                    <option value="publicationdate" selected="@(ViewBag.Sort == "publicationdate")">Sort by Publication Date</option>
                    <option value="price" selected="@(ViewBag.Sort == "price")">Sort by Price</option>
                    <option value="popularity" selected="@(ViewBag.Sort == "popularity")">Sort by Popularity</option>
                    <option value="author" selected="@(ViewBag.Sort == "author")">Sort by Author</option>
                </select>
            </div>

            <!-- Author -->
            <div>
                <input type="text" name="author" value="@ViewBag.Author" placeholder="Author" />
            </div>

            <!-- Genre -->
            <div>
                <input type="text" name="genre" value="@ViewBag.Genre" placeholder="Genre" />
            </div>

            <!-- Availability -->
            <div>
                <select name="availability">
                    <option value="all" selected="@(ViewBag.Availability == "all")">All Availability</option>
                    <option value="available" selected="@(ViewBag.Availability == "available")">In Stock</option>
                    <option value="unavailable" selected="@(ViewBag.Availability == "unavailable")">Out of Stock</option>
                </select>
            </div>

            <!-- Physical Library Access -->
            <div>
                <select name="physicalLibraryAccess">
                    <option value="" selected="@(ViewBag.PhysicalLibraryAccess == null)">All Library Access</option>
                    <option value="true" selected="@(ViewBag.PhysicalLibraryAccess == true)">Available in Library</option>
                    <option value="false" selected="@(ViewBag.PhysicalLibraryAccess == false)">Not in Library</option>
                </select>
            </div>

            <!-- Price Range -->
            <div class="flex gap-1">
                <input type="number" name="minPrice" value="@ViewBag.MinPrice" placeholder="Min Price" step="0.01" />
                <input type="number" name="maxPrice" value="@ViewBag.MaxPrice" placeholder="Max Price" step="0.01" />
            </div>

            <!-- Minimum Rating -->
            <div>
                <input type="number" name="minRating" value="@ViewBag.MinRating" placeholder="Min Rating (0-5)" step="0.1" min="0" max="5" />
            </div>

            <!-- Language -->
            <div>
                <input type="text" name="language" value="@ViewBag.Language" placeholder="Language" />
            </div>

            <!-- Format -->
            <div>
                <select name="format">
                    <option value="" selected="@(string.IsNullOrEmpty(ViewBag.Format))">All Formats</option>
                    <option value="paperback" selected="@(ViewBag.Format == "paperback")">Paperback</option>
                    <option value="hardcover" selected="@(ViewBag.Format == "hardcover")">Hardcover</option>
                    <option value="signed" selected="@(ViewBag.Format == "signed")">Signed Edition</option>
                    <option value="limited" selected="@(ViewBag.Format == "limited")">Limited Edition</option>
                    <option value="first" selected="@(ViewBag.Format == "first")">First Edition</option>
                    <option value="collectors" selected="@(ViewBag.Format == "collectors")">Collector's Edition</option>
                    <option value="authors" selected="@(ViewBag.Format == "authors")">Author's Edition</option>
                    <option value="deluxe" selected="@(ViewBag.Format == "deluxe")">Deluxe Edition</option>
                </select>
            </div>

            <!-- Publisher -->
            <div>
                <input type="text" name="publisher" value="@ViewBag.Publisher" placeholder="Publisher" />
            </div>

            <!-- Apply Filters Button -->
            <div>
                <button type="submit" class="apply-filters-btn">Apply Filters</button>
            </div>
        </form>
    </div>

    <!-- Book Grid -->
    <div class="book-grid">
        @foreach (var item in Model)
        {
            var book = item.Book;
            <div class="book-card">
                @if (item.OnSaleFlag)
                {
                    <span class="sale-badge">On Sale</span>
                }
                <div class="cover-image-container">
                    @if (!string.IsNullOrEmpty(book.CoverImageUrl))
                    {
                        <a asp-action="Details" asp-route-id="@book.Id">
                            <img src="@book.CoverImageUrl" alt="@book.Title" />
                        </a>
                    }
                    else
                    {
                        <div class="no-image">
                            <span>No Image</span>
                        </div>
                    }
                    @if (User.Identity.IsAuthenticated)
                    {
                        var user = await UserManager.GetUserAsync(User);
                        if (user != null && !(await UserManager.IsInRoleAsync(user, "Admin") || await UserManager.IsInRoleAsync(user, "Staff")))
                        {
                            <button class="wishlist-toggle @(ViewBag.Wishlist?.Contains(book.Id) == true ? "active" : "")" data-book-id="@book.Id" title="Toggle Wishlist">
                                <svg class="w-6 h-6 fill-current" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path class="heart-outline" d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" fill="none" stroke="currentColor" stroke-width="2" />
                                    <path class="heart-filled" d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" fill="currentColor" />
                                </svg>
                            </button>
                        }
                    }
                </div>
                <h3>
                    <a asp-action="Details" asp-route-id="@book.Id">@book.Title</a>
                </h3>
                <p>by @book.Author</p>
                @if (item.IsDiscountActive)
                {
                    <p class="price-info">
                        <span class="original-price">Price: $@book.Price</span>
                        <span class="discounted-price">Now: $@item.DiscountedPrice</span>
                    </p>
                }
                else
                {
                    <p>Price: $@book.Price</p>
                }
                <p>
                    @if (book.Quantity > 0)
                    {
                        <span>Qty: @book.Quantity</span>
                    }
                    else
                    {
                        <span class="out-of-stock">Out of Stock</span>
                    }
                </p>
                <p class="description">@book.Description</p>
                <p class="added-date">Added: @book.AddedDate.ToString("d MMM yy")</p>
                @if (User.Identity.IsAuthenticated)
                {
                    var user = await UserManager.GetUserAsync(User);
                    if (user != null && await UserManager.IsInRoleAsync(user, "Admin"))
                    {
                        <div class="action-buttons">
                            <a asp-action="Edit" asp-route-id="@book.Id" class="edit-btn">Edit</a>
                            <a asp-action="Delete" asp-route-id="@book.Id" class="delete-btn">Delete</a>
                        </div>
                    }
                }
            </div>
        }
    </div>

    <!-- Pagination -->
    @if (ViewBag.TotalPages > 1)
    {
        <div class="pagination">
            <nav aria-label="Page navigation">
                <ul>
                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                    {
                        <li>
                            <a asp-action="Index"
                               asp-route-page="@i"
                               asp-route-sort="@ViewBag.Sort"
                               asp-route-category="@ViewBag.Category"
                               asp-route-search="@ViewBag.Search"
                               asp-route-author="@ViewBag.Author"
                               asp-route-genre="@ViewBag.Genre"
                               asp-route-availability="@ViewBag.Availability"
                               asp-route-physicalLibraryAccess="@ViewBag.PhysicalLibraryAccess"
                               asp-route-minPrice="@ViewBag.MinPrice"
                               asp-route-maxPrice="@ViewBag.MaxPrice"
                               asp-route-minRating="@ViewBag.MinRating"
                               asp-route-language="@ViewBag.Language"
                               asp-route-format="@ViewBag.Format"
                               asp-route-publisher="@ViewBag.Publisher"
                               class="pagination-link @(i == ViewBag.CurrentPage ? "active" : "inactive")">@i</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    }
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            // Load initial wishlist status for each book
            $('.wishlist-toggle').each(function() {
                var bookId = $(this).data('book-id');
                var button = $(this);
                $.ajax({
                    url: '@Url.Action("IsInWishlist", "Books")',
                    type: 'GET',
                    data: { bookId: bookId },
                    success: function(response) {
                        if (response.inWishlist) {
                            button.find('.heart-outline').addClass('hidden');
                            button.find('.heart-filled').removeClass('hidden');
                            button.addClass('active');
                        }
                    },
                    error: function() {
                        console.log('Error checking wishlist status for book ' + bookId);
                    }
                });
            });

            // Handle wishlist toggle
            $('.wishlist-toggle').click(function(e) {
                e.preventDefault();
                var bookId = $(this).data('book-id');
                var button = $(this);
                $.ajax({
                    url: '@Url.Action("ToggleWishlist", "Books")',
                    type: 'POST',
                    data: { id: bookId },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            if (response.inWishlist) {
                                button.find('.heart-outline').addClass('hidden');
                                button.find('.heart-filled').removeClass('hidden');
                                button.addClass('active');
                            } else {
                                button.find('.heart-outline').removeClass('hidden');
                                button.find('.heart-filled').addClass('hidden');
                                button.removeClass('active');
                            }
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        var errorMessage = xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : 'An error occurred while toggling the wishlist.';
                        alert(errorMessage);
                    }
                });
            });

            // Auto-submit form on select change
            $('select[name="sort"], select[name="availability"], select[name="format"]').change(function() {
                $('#filterForm').submit();
            });
        });
    </script>
}